#include "bench_evaluation.h"

#include <json/json.h>

#include <string>
#include <fstream>
#include <iostream>
#include <stdlib.h>

#include "itkImageFileReader.h"

#include <boost/program_options/options_description.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>


  // opening ref image
using ImageType = itk::Image<double,3>;
using GroundTruthImageType = itk::Image<int,3>;


typedef itk::ImageFileReader<GroundTruthImageType> GroundTruthReaderType;
typedef itk::ImageFileReader<ImageType> ImageReaderType;
  

void launchScript(const std::string &commandLine,GroundTruthImageType::Pointer groundTruth,const std::string &outputName)
{
  
  std::cout<<commandLine<<std::endl;
  // starting external algorithm
  system(commandLine.c_str());

  auto readerO = ImageReaderType::New();
  readerO->SetFileName(outputName);
  readerO->Update();
  auto outputImage = readerO->GetOutput();
  std::cout<<"comparing output to ground truth....\n";
  // TODO do some stats here
  if( outputImage->GetLargestPossibleRegion().GetSize() != groundTruth->GetLargestPossibleRegion().GetSize() )
    {
      std::cout<<"output from program and groundTruth size does not match...No stats computed"<<std::endl;
      return;
    }
      
      
  Eval<ImageType,GroundTruthImageType> eval(outputImage,groundTruth);
  eval.print();
      
  std::cout<<"done"<<std::endl;
}

int main(int argc, char** argv)
{
  
  namespace po = boost::program_options;
  // parsing arguments
  po::options_description general_opt("Allowed options are ");
  general_opt.add_options()
    ("help,h", "display this message")
    ("input,i",po::value<std::string>(),"Input image ")
    ("groundTruth,g", po::value<std::string>(), "GroundTruth : input img" )
    ("parametersFile,p",po::value<std::string>()->default_value("parameters.json"),"ParameterFile : input json file");
  bool parsingOK = true;
  po::variables_map vm;

  try{
    po::store(po::parse_command_line(argc,argv,general_opt),vm);
  }catch(const std::exception& ex)
    {
      parsingOK = false;
      std::cout<<"Error checking program option"<<ex.what()<< std::endl;
    }

  po::notify(vm);
  if( !parsingOK || vm.count("help") || argc<=1 )
    {
      std::cout<<"\n Usage : benchmark [input image] [ground truth] [optionnal parameterFile] \n\n"
	       << " ground truth : ground truth image (.nii float/double type)\n"
	       <<" input : input image for benchmark (.nii float/double type)\n"
	       <<" parametersFile : input Json parameter file. If none provided, default is parameters.json\n"<<std::endl;
    
      return 0;
    }

  std::string inputFileName = vm["input"].as<std::string>();
  std::string groundTruthFileName = vm["groundTruth"].as<std::string>();
  std::string parameterFileName = vm["parametersFile"].as<std::string>();

  auto reader = GroundTruthReaderType::New();
  reader->SetFileName( groundTruthFileName );
  reader->Update();
  auto groundTruth = reader->GetOutput();
  
  Json::Value root;

  std::ifstream configFile(parameterFileName,std::ifstream::binary);
  if(!configFile.is_open())
    {
      std::cout<<"couldn't find parameter.json file...aborting"<<std::endl;
      exit(-1);
    }
      

  std::cout<<"opening JSON file...";
  configFile >> root;
  configFile.close();
  std::cout<<"done\n"<<std::endl;

  Json::Value::Members algoNames = root.getMemberNames();
  int nbAlgorithms = 0;

  

  std::cout<<"starting benchmark"<<std::endl;
  std::cout<<"------------------"<<std::endl;

  for(auto &algoName : algoNames)
    {
      std::cout<<"Algorithm nÂ°"<<nbAlgorithms<<" "<<algoName<<std::endl;
      nbAlgorithms++;

      const Json::Value algo = root[algoName];

      if( algo.isArray() )
	{
	  for(auto &p : algo)
	    {
	      const std::string outputName = p["Output"].asString();
	      const Json::Value arguments = p["Arguments"];

	      std::stringstream sStream;
	      sStream<<"./algorithms/"<<algoName<<" "<<"--input"<<" "<<inputFileName<<" "<<"--output "<<outputName<<" ";

	      for(auto &arg : arguments)
		{
		  std::string m = arg.getMemberNames()[0]; // only one name in the array 
		  sStream<<"--"<<m<<" "<<arg[m].asString()<<" ";
		}
	      launchScript(sStream.str(),groundTruth,outputName);
	    }
	}
      else
	{
	  const std::string outputName = algo["Output"].asString();
	  const Json::Value arguments = algo["Arguments"];

	  std::stringstream sStream;
	  sStream<<"./"<<algoName<<" "<<"--input"<<" "<<inputFileName<<" "<<"--output "<<outputName<<" ";

	  for(auto &arg : arguments)
	    {
	      std::string m = arg.getMemberNames()[0]; // only one name in the array 
	      sStream<<"-"<<m<<" "<<arg[m].asString()<<" ";
	    }
	  launchScript(sStream.str(),groundTruth,outputName);
	}
    }
}
